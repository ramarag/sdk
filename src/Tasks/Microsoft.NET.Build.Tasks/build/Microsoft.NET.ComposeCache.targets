<!--
***********************************************************************************************
Microsoft.NET.ComposeCache.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                                        ComposeCache
 
    The main publish entry point.
    ============================================================
    -->

  <Target Name="ComposeCache"
          DependsOnTargets="PrepareForComposeCache;
                            Restore;
                            ComputeAndCopyFilesToCacheDirectory"/>

  <!--
    ============================================================
                                        PrepareForComposeCache

    Prepare the prerequisites for ComposeCache.
    ============================================================
    -->
  <Target Name="PrepareForComposeCache">

    <PropertyGroup>
      <PreserveCacheLayout Condition="'$(PreserveCacheLayout)' == ''">true</PreserveCacheLayout>
      <PublishDir Condition="'$(ComposeDir)' == ''">$(OutputPath)\</PublishDir>
      <PublishDir Condition="'$(ComposeDir)' == '' and '$(RuntimeIdentifier)' != ''">$(OutputPath)$(RuntimeIdentifier)\</PublishDir>
      <!-- Ensure any PublishDir has a trailing slash, so it can be concatenated -->
      <PublishDir Condition="!HasTrailingSlash('$(PublishDir)')">$(PublishDir)\</PublishDir>
    </PropertyGroup>

    <MakeDir Directories="$(PublishDir)" />

  </Target>

  <!--
    ============================================================
                                        ComputeAndCopyFilesToCacheDirectory

    Computes the list of all files to copy to the publish directory and then publishes them.
    ============================================================
    -->
  <Target Name="ComputeAndCopyFilesToCacheDirectory"
          DependsOnTargets="ComputeFilesToCache;
                            CopyFilesToCacheDirectory" />

  <!--
    ============================================================
                                        CopyFilesToCacheDirectory

    Copy all build outputs, satellites and other necessary files to the publish directory.
    ============================================================
    -->
  <Target Name="CopyFilesToCacheDirectory"
          DependsOnTargets="_CopyResolvedManagedFiles;
                            _CopyResolvedUnManagedFiles" />

  <!--
    ============================================================
                                        _CopyResolvedManagedFiles

    Copy _ManagedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  <Target Name="_CopyResolvedManagedFiles"
          DependsOnTargets="_ComputeResolvedFilesToCachTypes;
                            _RunOptimizer"
          Inputs="@(_ManagedResolvedFileToPublish)"
          Outputs="@(_ManagedResolvedFileToPublish->'$(PublishDir)%(RecursiveDir)%(Fileame)%(Extension)')">

    <!--
        Not using SkipUnchangedFiles="true" because the application may want to change
        one of these files and not have an incremental build replace it.
        -->
    <Copy SourceFiles = "@(_ManagedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(RecursiveDir)%(Filename)%(Extension)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
    ============================================================
                                        _CopyResolvedUnManagedFiles

    Copy _UnManagedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  <Target Name="_CopyResolvedUnManagedFiles"
          DependsOnTargets="_ComputeResolvedFilesToCachTypes">

    <!--
        Not using SkipUnchangedFiles="true" because the application may want to change
        one of these files and not have an incremental build replace it.
        -->
    <Copy SourceFiles = "@(_UnManagedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(_UnManagedResolvedFileToPublish.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
    ============================================================
                                        _ComputeResolvedFilesToCachTypes

    Splits ResolvedFileToPublish items into 'PreserveNewest' and 'Always' buckets.
    ============================================================
    -->
  <Target Name="_ComputeResolvedFilesToCachTypes">
    <ItemGroup>
      <_ManagedResolvedFileToPublishCandidates Include="@(ResolvedFileToPublish)"
                                             Condition="'%(ResolvedFileToPublish.AssetType)'=='runtime'" />

      <_UnManagedResolvedFileToPublish Include="@(ResolvedFileToPublish)"
                                     Condition="'%(ResolvedFileToPublish.CopyToPublishDirectory)'!='Always'" />
    </ItemGroup>
  </Target>


  <!--
    ============================================================
                                        ComputeFilesToCache

    Gathers all the files that need to be copied to the publish directory.
    ============================================================
    -->
  <Target Name="ComputeFilesToCache"
          DependsOnTargets="_ComputeNetPublishAssets;
                            _ComputeCopyToPublishDirectoryItems">

    <PropertyGroup>
      <CopyBuildOutputToPublishDirectory Condition="'$(CopyBuildOutputToPublishDirectory)'==''">true</CopyBuildOutputToPublishDirectory>
      <CopyOutputSymbolsToPublishDirectory Condition="'$(CopyOutputSymbolsToPublishDirectory)'==''">true</CopyOutputSymbolsToPublishDirectory>
    </PropertyGroup>

    <ItemGroup>

      <!-- Copy all the assemblies -->
      <ResolvedFileToPublish Include="@(ResolvedAssembliesToPublish)">
      </ResolvedFileToPublish>
    </ItemGroup>

  </Target>

  <!--
    ============================================================
                                        _RunOptimizer

    Start the optimization face
    ============================================================
    -->
  <Target Name="_RunOptimizer"
          DependsOnTargets="_ComputeResolvedFilesToCachTypes">
 
<!-- Create a Project to Restore Crossgen --> 
  <PropertyGroup>
     <_CrossgenProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="$(MSBuildToolsVersion)">
  <PropertyGroup>
      <TargetFramework>$(TargetFramework)</TargetFramework>
      <RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>
  </PropertyGroup>
  <ItemGroup>
       <PackageReference Include="Microsoft.NETCore.App" Version="$(_ShortFrameworkVersion)" />
  </ItemGroup>

</Project>        

]]>
     </_CrossgenProjContent>
  </PropertyGroup>

  <PropertyGroup>
     <_CrossProjFileDir>$(TEMP)\Crossgen_$(_ShortFrameworkIdentifier)_$(_ShortFrameworkVersion)</_CrossProjFileDir>
     <_RuntimeDir>$(_CrossProjFileDir)\runtime</_RuntimeDir>
     <_CrossProjFile>$(_CrossProjFileDir)\Crossgen.csproj</_CrossProjFile>
     <_CrossProjAssetsFile>$(_CrossProjFileDir)\obj\project.assets.json</_CrossProjAssetsFile>
  </PropertyGroup>
    
  <MakeDir  Directories="$(_CrossProjFileDir)"/>
  <MakeDir  Directories="$(_RuntimeDir)"/>
  <WriteLinesToFile
      File="$(_CrossProjFile)"
      Lines="$(_CrossgenProjContent)"
      Overwrite="true" />
<!-- Restore Crossgen-->
<MSBuild Projects="$(MSBuildProjectFile)"
             Targets="Restore"
             Properties="RestoreGraphProjectInput=$(_CrossProjFile);ProjectAssetsFile=$(_CrossProjAssetsFile)"/>

<!-- Publish Crossgen to temp directory -->
<!-- Copy manged files to temp directory maintaining the structure -->
    <Copy SourceFiles = "@(_ManagedResolvedFileToPublishCandidates)"
          DestinationFiles="$(_RuntimeDir)\%(_ManagedResolvedFileToPublishCandidates.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
<!-- CrossGen the assemblies in place -->

<!-- Copy by proxy the directory structure to PublishDir-->

    <ItemGroup>
      <_ManagedResolvedFileToPublish Include="$(_RuntimeDir)\**\*.*" />   <!-- Change the candidates to the temp folder where crossgen operated on them -->
    </ItemGroup>
  </Target>


</Project>
