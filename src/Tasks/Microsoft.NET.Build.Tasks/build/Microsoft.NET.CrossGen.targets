<!--
***********************************************************************************************
Microsoft.NET.CrossGen.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>
  
  <!--
    ============================================================
                                        PrepOptimizer

    Sets up the common infrastructure for the optimization phase
    Outputs:
        _JitPath
        _Crossgen
    ============================================================
    -->
  <Target Name="PrepOptimizer"
          DependsOnTargets="_GenerateCrossgenProj;
                            _RestoreCrossgen;"
          Condition="$(SkipOptimization) != 'true' ">
    <!-- Get the coreclr path -->
    <ItemGroup>
      <_CoreclrResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                               Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='coreclr'" />
      <_CoreclrResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='libcoreclr'" />
      <_JitResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='clrjit'" />
      <_JitResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='libclrjit'" />
    </ItemGroup>

    <NETSdkError Condition="'@(_CoreclrResolvedPath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_CoreclrResolvedPath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_JitResolvedPath->Count())' &gt; 1"
                 ResourceName="MultipleFilesResolved"
                 FormatArguments="jit" />

    <NETSdkError Condition="'@(_JitResolvedPath)'== ''"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="jit" />

    <!-- Get the crossgen and jit path-->
    <PropertyGroup>
      <_CoreclrPath>@(_CoreclrResolvedPath)</_CoreclrPath>
      <_JitPath>@(_JitResolvedPath)</_JitPath>
      <_CoreclrDir>$([System.IO.Path]::GetDirectoryName($(_CoreclrPath)))</_CoreclrDir>
      <_CoreclrPkgDir>$([System.IO.Path]::Combine($(_CoreclrDir),"..\..\..\"))</_CoreclrPkgDir>
      <_CrossgenDir>$([System.IO.Path]::Combine($(_CoreclrPkgDir),"tools"))</_CrossgenDir>
      <!-- TODO override with rid specific tools path for x-arch -->
      <_Crossgen>$([System.IO.Path]::Combine($(_CrossgenDir),"crossgen"))</_Crossgen>
      <_Crossgen Condition="$(OS.ToUpper().Contains('WINDOWS'))">$([System.IO.Path]::Combine($(_CrossgenDir),"crossgen.exe"))</_Crossgen>
    </PropertyGroup>

    <NETSdkError Condition="!Exists($(_Crossgen))"
                 ResourceName="UnableToFindResolvedPath"
                 FormatArguments="$(_Crossgen)" />

    <PropertyGroup>
      <_Crossgen> $([System.IO.Path]::GetFullPath($(_Crossgen)))</_Crossgen>
    </PropertyGroup>
  </Target>
  <!--
    ============================================================
                                        _RunOptimizer

    Start the optimization phase
    ============================================================
    -->
  <Target Name="_RunOptimizer"
          DependsOnTargets="_InitializeBasicProps;
                            _ComputeResolvedFilesToCacheTypes;
                            _SetupStageForCrossgen"
          Condition="$(SkipOptimization) != 'true' ">
    
    <!-- Create the output directory where crossgened assemblies are going to be present -->
    <ItemGroup>
      <_AssembliestoCrossGen Include="$(_RuntimeDir)\**\*.*" />
      <_RuntimeOptimizedDirectories Include="@(_AssembliestoCrossGen -> '$(_RuntimeOptimizedDir)\%(RecursiveDir)')"/>
    </ItemGroup>
    <MakeDir  Directories="@(_RuntimeOptimizedDirectories)"/>

    <!-- CrossGen the assemblies  -->

    <MSBuild Projects="$(MSBuildProjectFullPath)"
                 Targets="RunCrossGen"
                 Properties="_CGenExe=$(_Crossgen);
                             _CGenJit=$(_JitPath);
                             _CGenInputAssembly=%(_AssembliestoCrossGen.Fullpath);
                             _CGenSubOutputPath=%(RecursiveDir)%(Filename)%(Extension);
                             _RuntimeOptimizedDir=$(_RuntimeOptimizedDir);
                             PublishDir=$(PublishDir);
                             _RuntimeDir=$(_RuntimeDir);
                             _CGenPlatformAssembliesPath=$(_RuntimeRefDir)$(PathSeparator)$(_NetCoreRefDir);"
                 Condition="'@(_AssembliestoCrossGen)' != ''"/>

  </Target>

  <!--
    ============================================================
                                        RunCrossGen
    Target Encapsulating the crossgen command  
    ============================================================
    -->
  <Target Name="RunCrossGen">

     <PropertyGroup>
       <_CGenOutputAssembly>$([System.IO.Path]::Combine($(_RuntimeOptimizedDir),$(_CGenSubOutputPath)))</_CGenOutputAssembly>
       <_CGenCommandline>$(_CGenExe) -readytorun -in $(_CGenInputAssembly) -out $(_CGenOutputAssembly) -jitpath $(_CGenJit) -platform_assemblies_paths $(_CGenPlatformAssembliesPath)</_CGenCommandline>
    </PropertyGroup>

    <Message Text="$(_CGenCommandline)"/>
    
    <!--Optimization skip if the assembly is already present in the final output directory-->
    <Exec
     Command="$(_CGenCommandline)"
     Condition="!Exists($([System.IO.Path]::Combine($(PublishDir),$(_CGenSubOutputPath))))">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>
    
    <Copy SourceFiles = "$(_CGenOutputAssembly)"
          DestinationFiles="$(PublishDir)\$(_CGenSubOutputPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          Condition="!Exists($([System.IO.Path]::Combine($(PublishDir),$(_CGenSubOutputPath))))">
      
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
      
  </Target>

  <!--
    ============================================================
                                       _GetCrossgenProps
    Generates props used by Crossgen
    ============================================================
    -->
  <Target Name="_GetCrossgenProps"
    Condition="$(SkipOptimization) != 'true' ">

    <PropertyGroup>
      <_CrossProjFileDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"Optimize"))</_CrossProjFileDir>
      <_NetCoreRefDir>$([System.IO.Path]::Combine($(_CrossProjFileDir), "netcoreapp"))</_NetCoreRefDir>              <!-- flat netcore app assemblies-->
      <_RuntimeOptimizedDir>$([System.IO.Path]::Combine($(_CrossProjFileDir), "runtimopt"))</_RuntimeOptimizedDir>   <!-- optimized app managed assemblies in nuget cache layout -->
    </PropertyGroup>
    
  </Target>

  <!--
    ============================================================
                                        _GenerateCrossgenProj
    Generates the project used to restore netcoreapp correspoding to FX_Version
    ============================================================
    -->
  <Target Name="_GenerateCrossgenProj"
          DependsOnTargets="_GetCrossgenProps;"
         Condition="$(SkipOptimization) != 'true' ">
    <!-- Create a Project to Restore Crossgen -->
    <PropertyGroup>
      <_CrossgenProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="$(MSBuildToolsVersion)">
  <PropertyGroup>
      <TargetFramework>$(_TFM)</TargetFramework>
      <RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>
      <RuntimeFrameworkVersion Condition="'$(FX_Version)' != ''">$(FX_Version)</RuntimeFrameworkVersion>
  </PropertyGroup>
</Project>        

]]>
      </_CrossgenProjContent>
    </PropertyGroup>

    <PropertyGroup>
      <!-- optimized app managed assemblies in nuget cache layout -->
      <_CrossProjFile>$([System.IO.Path]::Combine($(_CrossProjFileDir), "Optimize_Crossgen_$(RuntimeIdentifier)_$(_TFM).csproj"))</_CrossProjFile>
      <_CrossProjAssetsFile>$([System.IO.Path]::Combine($(_CrossProjFileDir), "obj", project.assets.json))</_CrossProjAssetsFile>
    </PropertyGroup>

    <MakeDir  Directories="$(_CrossProjFileDir)"/>
    
    <WriteLinesToFile
        File="$(_CrossProjFile)"
        Lines="$(_CrossgenProjContent)"
        Overwrite="true" />
  </Target>

  <!--
    ============================================================
                                        _SetupStageForCrossgen
    ============================================================
    -->
  <Target Name="_SetupStageForCrossgen"
          DependsOnTargets="_GetCrossgenProps;_FilterOutFXFromResolvedCandidates;_PoulateUnFilteredResolvedCandidates">
    <PropertyGroup>
      <_RuntimeDir>$([System.IO.Path]::Combine($(CacheWorkerWorkingDir),"runtime"))</_RuntimeDir>            <!-- app managed assemblies in nuget cache layout-->
      <_RuntimeRefDir>$([System.IO.Path]::Combine($(CacheWorkerWorkingDir), "runtimeref"))</_RuntimeRefDir>  <!-- flat app managed assemblies -->
    </PropertyGroup>
    <MakeDir  Directories="$(_RuntimeDir)"/>
    
    <!-- Copy managed files to temp directory maintaining the structure -->
    <Copy SourceFiles = "@(_ManagedResolvedFilesToOptimize)"
          DestinationFiles="$(_RuntimeDir)\%(_ManagedResolvedFilesToOptimize.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Copy managed files to  a flat temp directory for passing it as ref -->
    <Copy SourceFiles = "@(_ManagedResolvedFilesToOptimize)"
          DestinationFolder="$(_RuntimeRefDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

  </Target>

  <!--
    ============================================================
                                        _FilterOutFXFromResolvedCandidates
    ============================================================
    -->
  <Target Name="_FilterOutFXFromResolvedCandidates"
          Condition="$(SkipRemovingSystemFiles) != 'true' ">

    <ItemGroup>
      <_ManagedResolvedFilesToOptimize Include="@(_ManagedResolvedFileToPublishCandidates)" Condition="!Exists('$(_NetCoreRefDir)$(DirectorySeparatorChar)%(FileName)%(Extension)')"/>
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        _PoulateUnFilteredResolvedCandidates
    ============================================================
    -->
  <Target Name="_PoulateUnFilteredResolvedCandidates"
          Condition="$(SkipRemovingSystemFiles) == 'true' ">

   <ItemGroup>
      <_ManagedResolvedFilesToOptimize Include="@(_ManagedResolvedFileToPublishCandidates)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        _RestoreCrossgen
Restores netcoreapp and publishes it to a temp directory
    ============================================================
    -->
  <Target Name="_RestoreCrossgen"
           Condition="$(SkipOptimization) != 'true' ">
    <MSBuild Projects="$(_CrossProjFile)"
                 Targets="Restore"
                 Properties="RestoreGraphProjectInput=$(_CrossProjFile);"/>

    <ResolvePublishAssemblies ProjectPath="$(_CrossProjFile)"
                              AssetsFilePath="$(_CrossProjAssetsFile)"
                              TargetFramework="$(_TFM)"
                              RuntimeIdentifier="$(RuntimeIdentifier)"
                              PlatformLibraryName="$(MicrosoftNETPlatformLibrary)"
                              PrivateAssetsPackageReferences="@(PrivateAssetsPackageReference)"
                              DoNotTrackPackageAsResolved="true"
                              PreserveCacheLayout="false">

      <Output TaskParameter="AssembliesToPublish" ItemName="CrossgenResolvedAssembliesToPublish" />
    </ResolvePublishAssemblies>

    <!-- Copy managed files to  a flat temp directory for passing it as ref for crossgen -->
    <Copy SourceFiles = "@(CrossgenResolvedAssembliesToPublish)"
          DestinationFolder="$(_NetCoreRefDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>
 

</Project>
